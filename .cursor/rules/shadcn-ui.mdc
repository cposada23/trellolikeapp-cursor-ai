---
alwaysApply: true
description: Shadcn UI component usage guidelines for the project
---

# Shadcn UI Component Guidelines - STRICT ENFORCEMENT

This project **EXCLUSIVELY** uses **Shadcn UI** for **ALL** UI elements and components. 

## MANDATORY RULES

**CRITICAL**: This project has a ZERO-TOLERANCE policy for custom UI components.

### ✅ REQUIRED:
- **ALL** UI components MUST be Shadcn UI components imported from `@/components/ui/`
- **ALL** buttons, inputs, modals, cards, forms MUST use Shadcn UI
- **ALL** authentication UI MUST use Shadcn UI components with Clerk integration
- **CLERK COMPONENTS** from `@clerk/nextjs` ARE ALLOWED and should be used for authentication

### ❌ ABSOLUTELY PROHIBITED:
- Creating ANY custom UI components (buttons, inputs, modals, etc.)
- Using ANY other UI libraries (Material-UI, Ant Design, Chakra UI, etc.) **EXCEPT** `@clerk/nextjs`
- Writing custom CSS for UI components beyond Tailwind utility classes
- Implementing custom styling that duplicates Shadcn UI functionality

## Initialization

If Shadcn UI is not initialized in the project, use the following command:

```bash
npx shadcn@latest init
```

## Installing Components

If a particular component is not installed, use the following command format (example for button component):

```bash
npx shadcn@latest add button
```

## REQUIRED Shadcn UI Components

**MANDATORY**: Install these Shadcn UI components before implementing any UI:

```bash
# REQUIRED components for this project
npx shadcn@latest add button
npx shadcn@latest add dialog
npx shadcn@latest add form
npx shadcn@latest add input
npx shadcn@latest add card
npx shadcn@latest add table
npx shadcn@latest add navigation-menu
npx shadcn@latest add alert
npx shadcn@latest add badge
npx shadcn@latest add separator
npx shadcn@latest add skeleton
```

### Component Usage Requirements:
- **Buttons**: ONLY use `Button` from `@/components/ui/button` - NO custom button components
- **Forms**: ONLY use `Form`, `FormField`, `FormItem` from `@/components/ui/form`
- **Cards**: ONLY use `Card`, `CardHeader`, `CardContent` from `@/components/ui/card`
- **Dialogs/Modals**: ONLY use `Dialog`, `DialogContent`, `DialogHeader` from `@/components/ui/dialog`
- **Input fields**: ONLY use `Input` from `@/components/ui/input`
- **Tables**: ONLY use `Table`, `TableHeader`, `TableBody` from `@/components/ui/table`

## CLERK AUTHENTICATION WITH SHADCN UI - MANDATORY PATTERN

**CRITICAL**: All authentication UI MUST use Shadcn UI components with Clerk integration using Clerk's modal functionality.

### Required Implementation Pattern:

```typescript
// ✅ CORRECT - Clerk Modal Integration with Shadcn UI Button
'use client';

import { Button } from '@/components/ui/button';
import { SignInButton, SignUpButton, useAuth } from '@clerk/nextjs';

export function AuthButtons() {
  const { isSignedIn } = useAuth();
  
  if (isSignedIn) return null;
  
  return (
    <div className="flex gap-2">
      {/* Sign In Modal using Clerk's modal mode */}
      <SignInButton mode="modal" forceRedirectUrl="/dashboard">
        <Button variant="outline">
          Sign In
        </Button>
      </SignInButton>
      
      {/* Sign Up Modal using Clerk's modal mode */}
      <SignUpButton mode="modal" forceRedirectUrl="/dashboard">
        <Button>
          Sign Up
        </Button>
      </SignUpButton>
    </div>
  );
}
```

### ❌ ABSOLUTELY FORBIDDEN AUTHENTICATION PATTERNS:
- Using Clerk's default button styling (must wrap with Shadcn UI Button)
- Creating custom styled authentication buttons instead of using Shadcn UI
- Using redirects instead of modals for sign in/sign up (`mode="modal"` is required)
- Any authentication UI that doesn't use Shadcn UI Button components
- Implementing custom Dialog components when Clerk provides modal functionality

### ✅ REQUIRED AUTHENTICATION PATTERNS:
- ALL sign in/sign up buttons MUST be Shadcn UI `Button` components wrapped by Clerk components
- Use Clerk's `SignInButton` and `SignUpButton` with `mode="modal"`
- Always include `forceRedirectUrl` to specify post-authentication destination
- Wrap Shadcn UI `Button` components inside Clerk authentication components
- Use `@clerk/nextjs` components for authentication functionality

## Implementation Guidelines

1. **MANDATORY**: Always import Shadcn UI components from `@/components/ui/`
2. **MANDATORY**: Use ONLY Shadcn UI components for ALL UI elements
3. Customize components using ONLY Tailwind CSS utility classes
4. Follow Shadcn UI documentation for proper usage patterns
5. **NEVER** create custom UI components when Shadcn UI equivalent exists
6. **USE** `@clerk/nextjs` components for authentication functionality, but always style with Shadcn UI

## COMPONENT USAGE CLARIFICATION

### When to Use @clerk/nextjs Components:
- **Authentication**: Use `SignInButton`, `SignUpButton`, `UserButton`, `SignIn`, `SignUp`
- **User Management**: Use `UserProfile`, `OrganizationProfile`  
- **Protecting Content**: Use `SignedIn`, `SignedOut`, `Protect`

### When to Use Pure Shadcn UI:
- **All other UI elements**: Buttons (non-auth), Forms, Inputs, Cards, Tables, etc.
- **Non-authentication modals**: Use Shadcn UI `Dialog` components
- **Layout and styling**: Always use Shadcn UI for visual styling

### Integration Pattern:
**ALWAYS** wrap Shadcn UI components inside Clerk components for authentication, never the other way around:

```typescript
// ✅ CORRECT: Clerk component wraps Shadcn UI
<SignInButton mode="modal">
  <Button variant="outline">Sign In</Button>
</SignInButton>

// ❌ WRONG: Shadcn UI wraps Clerk component  
<Button>
  <SignInButton />
</Button>
```

## ENFORCEMENT - EXAMPLES OF VIOLATIONS

### ❌ VIOLATIONS THAT MUST BE REJECTED:

```typescript
// ❌ FORBIDDEN - Custom button component
export function CustomButton({ children, onClick }: { children: React.ReactNode; onClick: () => void }) {
  return (
    <button 
      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      onClick={onClick}
    >
      {children}
    </button>
  );
}

// ❌ FORBIDDEN - Custom modal implementation
export function CustomModal({ isOpen, onClose, children }: ModalProps) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50">
      <div className="bg-white p-4 rounded">{children}</div>
    </div>
  );
}

// ❌ FORBIDDEN - Using Clerk buttons without Shadcn UI styling
import { SignInButton, SignUpButton } from '@clerk/nextjs';
export function BadAuthButtons() {
  return (
    <div>
      {/* Using Clerk's default button styling - FORBIDDEN */}
      <SignInButton mode="modal" />
      <SignUpButton mode="modal" />
    </div>
  );
}

// ❌ FORBIDDEN - Custom Dialog implementation instead of Clerk modal
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { SignIn, SignUp } from '@clerk/nextjs';
export function BadDialogAuth() {
  return (
    <Dialog>
      <DialogContent>
        <SignIn routing="virtual" />
      </DialogContent>
    </Dialog>
  );
}

// ❌ FORBIDDEN - Custom form inputs
export function CustomInput({ placeholder, value, onChange }: InputProps) {
  return (
    <input 
      className="border rounded px-3 py-2"
      placeholder={placeholder}
      value={value}
      onChange={onChange}
    />
  );
}
```

### ✅ CORRECT IMPLEMENTATIONS:

```typescript
// ✅ CORRECT - Using Shadcn UI Button
import { Button } from '@/components/ui/button';

export function CorrectButton() {
  return <Button onClick={handleClick}>Click Me</Button>;
}

// ✅ CORRECT - Clerk Authentication with Shadcn UI Button
import { Button } from '@/components/ui/button';
import { SignInButton, SignUpButton } from '@clerk/nextjs';

export function CorrectAuthButtons() {
  return (
    <div className="flex gap-2">
      <SignInButton mode="modal" forceRedirectUrl="/dashboard">
        <Button variant="outline">Sign In</Button>
      </SignInButton>
      
      <SignUpButton mode="modal" forceRedirectUrl="/dashboard">
        <Button>Sign Up</Button>
      </SignUpButton>
    </div>
  );
}

// ✅ CORRECT - Using Shadcn UI Dialog for non-auth modals
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';

export function CorrectModal() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button>Open Modal</Button>
      </DialogTrigger>
      <DialogContent>
        <p>Modal content here</p>
      </DialogContent>
    </Dialog>
  );
}

// ✅ CORRECT - Using Shadcn UI Input
import { Input } from '@/components/ui/input';

export function CorrectInput() {
  return <Input placeholder="Enter text..." />;
}
```

## QUALITY ASSURANCE CHECKLIST

Before submitting any code, verify:

- [ ] **NO** custom UI components exist in the codebase
- [ ] **ALL** buttons use `Button` from `@/components/ui/button`
- [ ] **ALL** modals (non-auth) use `Dialog` components from `@/components/ui/dialog`
- [ ] **ALL** forms use `Form` components from `@/components/ui/form`
- [ ] **ALL** inputs use `Input` from `@/components/ui/input`
- [ ] **ALL** authentication uses Clerk components (`SignInButton`, `SignUpButton`) with `mode="modal"`
- [ ] **ALL** authentication buttons are Shadcn UI `Button` components wrapped by Clerk components
- [ ] **ALL** authentication includes `forceRedirectUrl` parameter
- [ ] **NO** custom CSS beyond Tailwind utility classes
- [ ] **NO** other UI libraries imported or used (except `@clerk/nextjs`)
- [ ] **NO** custom Dialog implementations for authentication (use Clerk's modal mode)
- [ ] **PROPER** integration pattern: Clerk wraps Shadcn UI, not vice versa

## Resources

- [Shadcn UI Documentation](https://ui.shadcn.com/docs) - Main documentation and getting started guide
- [Component Library](https://ui.shadcn.com/docs/components/accordion) - Complete list of available components
- [Installation Guides](https://ui.shadcn.com/docs/installation/next) - Framework-specific installation instructions
- [Examples & Blocks](https://ui.shadcn.com/blocks) - Pre-built component blocks and examples
- [Theming Guide](https://ui.shadcn.com/docs/theming) - Customization and theming documentation